#!/usr/bin/env python

#################################################################################
#  Copyright (C) 2021  David King <dave@daveking.com>
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, you can obtain one at https://mozilla.org/MPL/2.0/.
#################################################################################
#  Mark the commercials in a Jellyfin Live TV recording file with chapter 
#  markers and remux it from a *.ts container into a *.mp4 container
#  without re-encoding the contents.
#
#  This allows the use of the VLC video player for playback of Live TV 
#  recordings on the Nvidia SHIELD device.  VLC has much better
#  fast-forward/rewind capabilities (among other things) than does the
#  Jellyfin Android TV app's internal video player.  But it can't seek in
#  a *.ts container.
#################################################################################

import sys
import os
import tempfile
import subprocess
import shutil
import logging
import multiprocessing

logdir = '/var/log/jellyfin'

#  Log the output of calls made to subprocess.run()
def log_subout(output):
    for lines in output.decode('utf-8').split('\n'):
        for line in lines.split('\r'):
            logging.debug(line)
	
#  Jellyfin will pass the recording filename on the command line
if len(sys.argv) == 2:
    fn = sys.argv[1]
    if os.path.exists(fn):
        logfile = '{}.postprocessing'.format(os.path.join(logdir, os.path.splitext(os.path.basename(fn))[0]))
        logging.basicConfig(filename=logfile, format='%(asctime)s %(levelname)s: %(message)s', level=logging.DEBUG)
        
        #  We use this path for temporary work files
        tempdir = tempfile.gettempdir()
        
        #  Make sure that we have the full path to the source file
        fn = os.path.abspath(fn)

        #  Commercial flagging -  use the comskip utility to generate a 
        #  ffmetadata format file containing chapter metadata marking the
        #  commercials it detects.
        logging.info('Using comskip to generate chapter marks for commercials in the MP4')
        try:
            inifile = '{}.comskip.ini'.format(os.path.join(tempdir, os.path.basename(fn)))
            with open(inifile, 'w') as ini:
                print('[Main Settings]', file=ini)
                print('detect_method=27', file=ini)
                print('[CPU Load Reduction]', file=ini)
                print('thread_count={}'.format(round(multiprocessing.cpu_count() / 2)), file=ini)
                print('[Global Removes]', file=ini)
                print('delete_show_after_last_commercial=1', file=ini)
                print('delete_show_before_first_commercial=1', file=ini)
                print('[Output Control]', file=ini)
                print('output_default=0', file=ini)
                print('output_ffmeta=1', file=ini)
            proc = subprocess.run('comskip --ini="{}" --ts --output="{}" "{}"'.format(inifile, tempdir, fn), shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            log_subout(proc.stdout)
            os.unlink(inifile)
        except subprocess.CalledProcessError as e:
            logging.critical(e)
            log_subout(e.output)
            exit(e.returncode)
        ffmetadata = os.path.join(tempdir, '{}.ffmeta'.format(os.path.splitext(os.path.basename(fn))[0]))
        if not os.path.exists(ffmetadata):
            logging.critical('ffmetadata file "{}" does not exist'.format(ffmetadata))
            exit(1)

        #  Remux the *.ts as a *.mp4, adding the chapter metadata
        logging.info('Using ffmpeg to remux the TS file as a MP4 file and to add the chapter markers')
        outfile = os.path.join(tempdir, '{}.mp4'.format(os.path.splitext(os.path.basename(fn))[0]))
        try:
            proc = subprocess.run('ffmpeg -hide_banner -y -i "{}" -i "{}" -map 0 -map_metadata 1 -c copy "{}"'.format(fn, ffmetadata, outfile), shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            log_subout(proc.stdout)
        except subprocess.CalledProcessError as e:
            logging.critical(e)
            log_subout(e.output)
            exit(e.returncode)

        #  Replace the *.ts with the *.mp4 and clean up
        try:
            logging.info('Replacing the TS file wth the MP4 file')
            shutil.move(outfile, os.path.split(fn)[0])
            (head, tail) = os.path.split(fn)
            shutil.move(fn, os.path.join(head, '.' + tail))
            os.unlink(ffmetadata)
        except Exception as e:
            logging.critical(e)
            exit(1)

    else:
        print('{} does not exist'.format(fn))
        exit(1)
else:
    print('Usage: {} <filename>'.format(sys.argv[0]))
    exit(1)
