#!/usr/bin/env python

#********************************************************************************
#  Copyright (C) 2021  David King <dave@daveking.com>
#
#  This Source Code Form is subject to the terms of the Mozilla Public
#  License, v. 2.0. If a copy of the MPL was not distributed with this
#  file, you can obtain one at https://mozilla.org/MPL/2.0/.
#********************************************************************************
#  Search XMLTV program listings for keywords in program titles, subtitles,
#  descriptions, and cast/crew lists.  Ask Jellyfin to record those programs
#  that match.
#
#  This script only works in environments where XMLTV is being used as the TV
#  guide data provider for Jellyfin.
#********************************************************************************

import logging
import os

#********************************************************************************
#                          C o n f i g u r a t i o n                            *
#********************************************************************************

#  A search string can be any regular expression that works inside re.compile().
#  See https://docs.python.org/3/library/re.html for details.
#  Case is always ignored for these searches. 
searches = [
	'Stevie Ray Vaughan',               
	'(?=.*David)(?=.*Attenborough)',   
	'(?=.*Jeremy)(?=.*Clarkson)',
	'(?=.*Lucy)(?=.*Worsley)',
	'(?=.*Anthony)(?=.*Bourdain)(?!.*No Reservations)'
]

#  Scheduling recordings requires Jellyfin user authentication, api-key authentication isn't sufficient
server_url = 'http://localhost:8096/emby'
userid = '<JELLYFIN_USERID>'
passwd = '<JELLYFIN_PASSWDRD'
#  WARNING: These values are sent in the clear.  Either run this script locally on the
#  Jellyfin server or use an HTTPS URL to connect to the Jellyfin server.

#  File where we can find the latest output from the XMLTV grabber
xmltv_file  = '/opt/xmltv/xmltv_output.xml'

#  I used SQLAlchemy as the database interface so that any database engine it
#  supports could be used behind this script.  Provision this variable with any
#  valid SQLAlchemy "create_engine" URL to connect to the database engine of your
#  choice.  See https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine
#  for additional details.
db_url = 'mysql://<SQL_USERID>:<SQL_PASSWORD>@<SQL_SERVER>/<SQL_DATABASE>'

#  Directory into which we will write our log file
logdir = '/var/log/jellyfin'

#  Control the level of detail that is logged
log_level = logging.DEBUG	#  Can be logging.DEBUG, logging.INFO or logging.CRITICAL

#  Use this line to log to the console
#logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s', level=log_level)

#  Use these lines to log to a file
logfile = '{}.log'.format(os.path.join(logdir, os.path.splitext(os.path.basename(__file__))[0]))
logging.basicConfig(filename=logfile, format='%(asctime)s %(levelname)s: %(message)s', level=log_level)

#********************************************************************************
#                               F u n c t i o n s                               *
#********************************************************************************

import datetime
import xml.etree.ElementTree as etree
import requests
import tempfile
import hashlib
import json
import re
import sqlalchemy

#  Once a program has been found in the XMLTV schedule that matches one of the
#  regular expressions above, this routine will try to schedule that program to
#  be recorded by Jellyfin.  It maps the channel id string used by XMLTV to a
#  Jellyfin channel id string, via the actual channel number.  It checks to see
#  if Jellyfin already has the program in its recordings collection or a timer
#  is already set for the program before it submits a request to create a timer.
def recordProgramme(root, channel_list, program_guide, programme):
	#  If the start time is in the future, record the program.  
	#  Jellyfin and XMLTV times are UTC.
	startdate = programme.attrib['start']
	startdate = '{}-{}-{}T{}:{}:{}.0000000Z'.format(startdate[0:4], startdate[4:6], startdate[6:8], startdate[8:10], startdate[10:12], startdate[12:14])
	start = datetime.datetime.strptime(re.sub(r'\..*Z', '', startdate), '%Y-%m-%dT%H:%M:%S')
	if start.timestamp() > datetime.datetime.utcnow().timestamp():
		logging.debug('program start {} is in the future'.format(startdate))

		logging.debug('Looking for XMLTV channel number that matches XMLTV channel_id {}'.format(programme.attrib['channel']))
		channel = ''
		for dname in root.findall("./channel[@id='{}']/display-name".format(programme.attrib['channel'])):
			try:
				channel = int(dname.text)
			except:
				pass
		if channel != '':
			logging.debug('XMLTV channel_id {} -> XMLTV channel number {}'.format(programme.attrib['channel'], channel))
		else:
			logging.critical('Cannot find a XMLTV channel number that matches XMLTV channel_id {}'.format(programme.attrib['channel']))
			return False

		logging.debug('Looking for Jellyfin channel_id that matches XMLTV channel number {}'.format(channel))
		channel_id = ''
		for ch in channel_list:
			if ch['Number'] == str(channel):
				channel_id = ch['Id']
		if channel_id != '':
			logging.debug('XMLTV channel number {} -> Jellyfin channel_id {}'.format(channel, channel_id))
		else:
			logging.critical('Cannot find a Jellyfin channel_id that matches XMLTV channel number {}'.format(channel))
			return False
				
		logging.debug('Searching Jellyfin program_guide for program with channel_id {} and starttime {}'.format(channel_id, startdate))
		for program in program_guide:
			if program['ChannelId'] == channel_id and program['StartDate'] == startdate:

				#  Check to see if there is already a pending timer or existing recording
				logging.info('Checking matching program "{}" on channel "{}" starting at "{}" and ending at "{}"'.format(program['Name'], channel, program['StartDate'], program['EndDate']))
				logging.info('Checking to see it it is already scheduled to be recorded')
				for timer in existing_timers:
					logging.debug('Comparing to existing timer: "{}", "{}", "{}", "{}"'.format(timer['ProgramInfo']['Name'], timer['ChannelId'], timer['StartDate'], timer['EndDate']))
					if timer['ProgramInfo']['Name'] == program['Name'] and timer['ChannelId'] == program['ChannelId'] and timer['StartDate'] == program['StartDate'] and timer['EndDate'] == program['EndDate']:
						logging.info('It is already scheduled to be recorded, skipping this program')
						return False
				logging.info('Checking to see if it has already been recorded')
				for recording in existing_recordings:
					logging.debug('Comparing to exisiting recording: "{}", "{}", "{}"'.format(recording['SeriesName'], recording['Name'], recording['Overview']))
					if recording['SeriesName'] == program['Name'] and recording['Name'] == program['EpisodeTitle'] and recording['Overview'] == program['Overview']:
						logging.info('It has already been recorded, skipping this program')
						return False  
				logging.info('Check to see if this program has ever been recorded before.')
				if previouslyRecorded(db_url, program):
					logging.info('This program is in the recording memory database, skipping it.')
					return False  
					
				logging.info('Submitting request to record "{}" on channel {} starting at "{}" and ending at "{}"'.format(program['Name'], program['ChannelId'], program['StartDate'], program['EndDate']))

				#  Get a recording template for this program
				logging.debug('Getting a recording template for this program')
				response = requests.get('{}/LiveTV/Timers/Defaults?programID={}'.format(server_url, program['Id']), headers=headers)
				if response.status_code != 200:
					logging.critical('Failed to get the recording template with status code {} - {}'.format(response.status_code, response.text))
					raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
				recording_template = response.json()
				logging.debug('recording_template = {}'.format(recording_template))

				#  Create a recording timer for this program
				logging.debug('Creating recording timer')
				response = requests.post('{}/LiveTV/Timers'.format(server_url), json=recording_template, headers=headers)
				if response.status_code != 204:
					logging.critical('Failed to create the timer with status code {} - {}'.format(response.status_code, response.text))
					raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
				logging.debug('timer response = {} {}'.format(response.status_code, response.text))
				
				return True
				
		logging.debug('Unable to find a matching program in the Jellyfin program_guide')
		return False
	else:
		logging.debug('Program start time has already passed, will not record.')
		return False

#  Search for this program in the recording memory database created by my
#  postprocessRecording script to see if it has ever been recorded before.
def previouslyRecorded(db_url, program):

	title = ''
	if 'Name' in program:
		title = program['Name']
	subtitle = ''
	season = ''
	episode = ''
	if 'ParentIndexNumber' in program:
		season = str(program['ParentIndexNumber']).zfill(2)
		if 'IndexNumber' in program:
			episode = str(program['IndexNumber']).zfill(2)
	elif 'IsMovie' in program and program['IsMovie']:
		season = program['ProductionYear']
	else:
		if 'EpisodeTitle' in program:
			subtitle = program['EpisodeTitle']
	
	logging.info('Performing database query for this program:')
	logging.info('Title: "{}"'.format(title))
	logging.info('Subtitle: "{}"'.format(subtitle))
	logging.info('Season: "{}"'.format(season))
	logging.info('Episode: "{}"'.format(episode))
	
	#  Define database engine, with debugging set to match this script
	if logging.root.level == logging.DEBUG:
		engine = sqlalchemy.create_engine(db_url, echo=True)
	else:
		engine = sqlalchemy.create_engine(db_url, echo=False)

	#  Database query
	try:
		if subtitle == '':
			sql = sqlalchemy.sql.text('SELECT * FROM `memory` WHERE Title LIKE "{}" AND Season = "{}" AND Episode = "{}"'.format(title, season, episode))
		else:
			sql = sqlalchemy.sql.text('SELECT * FROM `memory` WHERE Title LIKE "{}" AND Subtitle LIKE "{}" AND Season = "{}" AND Episode = "{}"'.format(title, subtitle, season, episode))
		with engine.connect() as connection:
			result = connection.execute(sql).fetchall()
			if len(result) > 0:
				logging.info('Program found in database.')
				return True
	except Exception as e:
		logging.warning(e)
		logging.warning('Database query failed')
	
	logging.info('Program not found in database.')
	
	return False
	
#  Write JSON data into a log file in the temporary directory.  This is called
#  for each data request made to Jellyfin if we are logging at the DEBUG level.		
def logResponseData(name, data):
	tmpfn = os.path.join(tempfile.gettempdir(), '{}.{}.log'.format(os.path.splitext(os.path.basename(__file__))[0], name))
	logging.debug('{} data logged in file {}'.format(name, tmpfn))
	with open(tmpfn, 'w') as f:
		print(json.dumps(data, indent=4), file=f)

#********************************************************************************
#                                    M a i n                                    *
#********************************************************************************

logging.info('Authenticating with Jellyfin server')
headers = {
	'Content-Type': 'application/json',
	'X-Emby-Authorization': 'MediaBrowser Client="Jellyfin Web", Device="keywordRecording", DeviceId="xxx", Version="0.0.1"'
}
body = {
	'username': userid,
	'pw': passwd,
}
response = requests.post('{}/Users/AuthenticateByName'.format(server_url), headers=headers, json=body)
if response.status_code == 200 or response.status_code == 204:
	headers['X-Emby-Authorization'] = '{}, Token={}'.format(headers['X-Emby-Authorization'], response.json()['AccessToken'])
	user_id = response.json()['User']['Id']    #  Only used on the /LiveTV/Recordings call for existing recordings below
else:
	logging.critical('Authentication failed with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))

logging.info('Getting list of programs already scheduled for recording.')
response = requests.get('{}/LiveTV/Timers'.format(server_url), headers=headers)
if response.status_code != 200:
	logging.critical('Failed to get list of programs already sceduled for recording with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
existing_timers = response.json()['Items']
if logging.root.level >= logging.DEBUG:
	logResponseData('existing_timers', existing_timers)

logging.info('Getting list of existing recordings.')
response = requests.get('{}/LiveTV/Recordings?userid={}&fields=Overview'.format(server_url, user_id), headers=headers)
if response.status_code != 200:
	logging.critical('Failed to get list of existing recordings with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
existing_recordings = response.json()['Items']
if logging.root.level >= logging.DEBUG:
	logResponseData('existing_recordings', existing_recordings)

logging.info('Getting Program Guide data.')
response = requests.get('{}/LiveTV/Programs?fields=Overview,ProviderIds,People'.format(server_url), headers=headers)
if response.status_code != 200:
	logging.critical('Failed to get Program Guide data with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
program_guide = response.json()['Items']
if logging.root.level >= logging.DEBUG:
	logResponseData('program_guide', program_guide)

logging.info('Getting channel mappings from Jellyfin')
response = requests.get('{}/LiveTV/Channels'.format(server_url), headers=headers)
if response.status_code != 200:
	logging.critical('Failed to get the list of channels with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
channel_list = response.json()['Items']
if logging.root.level >= logging.DEBUG:
	logResponseData('channel_list', channel_list)

logging.info('Reading XMLTV schedule from {}'.format(xmltv_file))
xmltv_schedule = etree.parse(xmltv_file)

logging.info('Searching XMLTV schedule for programs that match the list of regular expressions.')
root = xmltv_schedule.getroot()
for programme in root.findall('./programme'):
	recorded = False

	#  Record if title, sub-title or description match any of the search strings
	for expression in searches:
		exp = re.compile(expression, flags=re.IGNORECASE)
		if exp.search(programme.findtext('title', default='')):
			logging.info('{} at {} matched expression {}'.format(programme.findtext('title'), programme.attrib['start'], expression))
			recorded = recordProgramme(root, channel_list, program_guide, programme)
		elif exp.search(programme.findtext('sub-title', default='')):
			logging.info('{} at {} matched expression {} in the subtitle.'.format(programme.findtext('title'), programme.attrib['start'], expression))
			recorded = recordProgramme(root, channel_list, program_guide, programme)
		elif exp.search(programme.findtext('desc', default='')):
			logging.info('{} at {} matched expression {} in the description.'.format(programme.findtext('title'), programme.attrib['start'], expression))
			recorded = recordProgramme(root, channel_list, program_guide, programme)
			
	#  Record if any of the names in the credits matches a search string
	if not recorded:
		for credits in programme.findall('./credits'):
			for person in credits:
				for expression in searches:
					exp = re.compile(expression, flags=re.IGNORECASE)
					if exp.search(person.text):
						logging.info('{} at {} matched expression {} in the credits'.format(programme.findtext('title', default=''), programme.attrib['start'], expression))
						recordProgramme(root, channel_list, program_guide, programme)

#  End Jellyfin session/logout
logging.info('Performing logout')
response = requests.post('{}/Sessions/Logout'.format(server_url), headers=headers)
if response.status_code != 204:
	logging.critical('Logout failed with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
logging.info('Done')
