#!/usr/bin/env python

#  Copyright (C) 2021  David King <dave@daveking.com>
#
#  This Source Code Form is subject to the terms of the Mozilla Public License,
#  v. 2.0.  If a copy of the MPL was not distributed with this file, You can
#  obtain one at https://mozilla.org/MPL/2.0/.

import requests
import hashlib
import re
import json
import datetime
import logging
import os
import sys
import SchedulesDirect

#  A search string can be any regular expression that works inside re.compile()
#  See https://docs.python.org/3/library/re.html for details
searches = [
	'Stevie Ray Vaughan',           #  Match htis (sub)string
	'(?=.*Anthony)(?=.*Bourdain)'   #  Match two words in a string, in any order
]

#  Scheduling recordings requires user authntication, api-key authentication isn't sufficient
server_url = 'http://mythtv.localdomain:8096/emby'
userid = ''
passwd = ''
#  WARNING: These values are sent in the clear.  Either run this script locally on the
#  Jellyfin server or use an HTTPS URL to connect to the Jellyfin server.

#  Directory into which we write our log file
#logdir = '/var/log/jellyfin'
logdir = '/tmp'

#  Control the level of detail that is logged
log_level = logging.INFO	#  Can be logging.DEBUG, logging.INFO or logging.CRITICAL

#  Use this line to log to the console
logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s', level=log_level)

#  Use these lines to log to a file
#logfile = '{}.log'.format(os.path.join(logdir, os.path.splitext(os.path.basename(sys.argv[0]))[0]))
#logging.basicConfig(filename=logfile, format='%(asctime)s %(levelname)s: %(message)s', level=log_level)

#  Schedules Direct API URL 
schedulesdirect_url = 'https://json.schedulesdirect.org/20141201'

#####  No changes required below this point  #####

logging.info('Authenticating with Jellyfin server')
headers = {
	'Content-Type': 'application/json',
	'X-Emby-Authorization': 'MediaBrowser Client="Jellyfin Web", Device="keywordRecording", DeviceId="xxx", Version="0.0.1"'
}
body = {
	'username': userid,
	'pw': passwd,
}
response = requests.post('{}/Users/AuthenticateByName'.format(server_url), headers=headers, json=body)
if response.status_code == 200 or response.status_code == 204:
	headers['X-Emby-Authorization'] = '{}, Token={}'.format(headers['X-Emby-Authorization'], response.json()['AccessToken'])
	user_id = response.json()['User']['Id']    #  Only used on the /LiveTV/Recordings call for existing recordings below
else:
	logging.critical('Authentication failed with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))

logging.info('Getting list of programs already scheduled for recording.')
response = requests.get('{}/LiveTV/Timers'.format(server_url), headers=headers)
if response.status_code != 200:
	logging.critical('Failed to get list of programs already sceduled for recording with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
existing_timers = response.json()['Items']
logging.debug('existing_timers = {}'.format(existing_timers))

logging.info('Getting list of existing recordings.')
response = requests.get('{}/LiveTV/Recordings?userid={}&fields=Overview'.format(server_url, user_id), headers=headers)
if response.status_code != 200:
	logging.critical('Failed to get list of existing recordings with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
existing_recordings = response.json()['Items']
logging.debug('existing_recordings = {}'.format(existing_recordings))

logging.info('Getting Program Guide data.')
response = requests.get('{}/LiveTV/Programs?fields=Overview,ProviderIds'.format(server_url), headers=headers)
if response.status_code != 200:
	logging.critical('Failed to get Program Guide data with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
program_guide = response.json()['Items']
logging.debug('program_guide = {}'.format(program_guide))

logging.info('Searching program guide data for programs that match the list of regular expressions.')
for program in program_guide:
	logging.debug('program = {}'.format(program))

	#  Add missing fields to make our lives easier
	if 'EpisodeTitle' not in program:
		program['EpisodeTitle'] = ''
	if 'Overview' not in program:
		program['Overview'] = ''

	for expression in searches:
		exp = re.compile(expression)
		if exp.search(program['Name']) or exp.search(program['EpisodeTitle']) or exp.search(program['Overview']):
			logging.debug('program matches expression "{}"'.format(exp))

			#  If the start time is in the future, record the program
			#  Jellyfin times are UTC
			start = datetime.datetime.strptime(re.sub(r'\..*Z', '', program['StartDate']), '%Y-%m-%dT%H:%M:%S')
			if start.timestamp() > datetime.datetime.utcnow().timestamp():
				logging.debug('program start {} is in the future'.format(program['StartDate']))

				#  Check to see if there is already a pending timer or existing recording
				skip = False
				logging.info('Checking matching program "{}" on channel "{}" starting at "{}" and ending at "{}"'.format(program['Name'], program['ChannelId'], program['StartDate'], program['EndDate']))
				for timer in existing_timers:
					logging.debug('Comparing to existing timer: "{}", "{}", "{}", "{}"'.format(timer['ProgramInfo']['Name'], timer['ChannelId'], timer['StartDate'], timer['EndDate']))
					if timer['ProgramInfo']['Name'] == program['Name'] and timer['ChannelId'] == program['ChannelId'] and timer['StartDate'] == program['StartDate'] and timer['EndDate'] == program['EndDate']:
						logging.info('It is already scheduled to be recorded, skipping this program')
						skip = True
						break
				if not skip:
					logging.info('Checking matching program "{}" episode title "{}" overview "{}"'.format(program['Name'], program['EpisodeTitle'], program['Overview']))
					for recording in existing_recordings:
						logging.debug('Comparing to exisiting recording: "{}", "{}", "{}"'.format(recording['SeriesName'], recording['Name'], recording['Overview']))
						if recording['SeriesName'] == program['Name'] and recording['Name'] == program['EpisodeTitle'] and recording['Overview'] == program['Overview']:
							logging.info('It has already been recorded, skipping this program')
							skip = True  
							break
				if skip:
					continue   #  Do next search
					
				logging.info('Recording "{}" on channel {} starting at "{}" and ending at "{}"'.format(program['Name'], program['ChannelId'], program['StartDate'], program['EndDate']))

				#  Get a recording template for this program
				logging.debug('Getting a recording template for this program')
				response = requests.get('{}/LiveTV/Timers/Defaults?programID={}'.format(server_url, program['Id']), headers=headers)
				if response.status_code != 200:
					logging.critical('Failed to get the recording template with status code {} - {}'.format(response.status_code, response.text))
					raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
				recording_template = response.json()
				logging.debug('recording_template = {}'.format(recording_template))

				#  Schedule the recording
				logging.debug('Creating recording timer')
				response = requests.post('{}/LiveTV/Timers'.format(server_url), json=recording_template, headers=headers)
				if response.status_code != 204:
					logging.critical('Failed to create the timer with status code {} - {}'.format(response.status_code, response.text))
					raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
				logging.debug('timer response = {} {}'.format(response.status_code, response.text))
		else:
			logging.debug('program does not match expression "{}"'.format(exp))
			
#  End session/logout
logging.info('Performing logout')
response = requests.post('{}/Sessions/Logout'.format(server_url), headers=headers)
if response.status_code != 204:
	logging.critical('Logout failed with status code {} - {}'.format(response.status_code, response.text))
	raise Exception('Jellyfin HTTP Status Code = {} - {}'.format(response.status_code, response.text))
logging.info('Done')
